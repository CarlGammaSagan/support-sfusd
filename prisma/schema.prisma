generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model School {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String
  address            String
  neighborhood       String
  students           Int?
  frl                Float    @default(0)
  ell                Float    @default(0)
  ssn                Float    @default(0)
  priority           Boolean  @default(false)
  img                String?
  latitude           String
  longitude          String
  profile            SchoolProfile?
  metrics            Metric[]
  programs           Program[]
}

model SchoolProfile {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  schoolId           String   @unique @db.Uuid
  school		         School   @relation(fields: [schoolId], references: [id])
  about			         String
  about_bp           String[]
  volunteer_form_url String
  testimonial        String?
  principal		       String
  instagram_url		   String?
  facebook_url		   String?
  website_url		     String?
}

model Metric {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  schoolId           String   @db.Uuid
  school		         School @relation(fields: [schoolId], references: [id])
  name			         String
  percentage		     Float    @default(0)
  category           MetricCategory
}


model Program {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  schoolId           String   @db.Uuid
  school		         School @relation(fields: [schoolId], references: [id])
  name			         String
  details		         String
  url			           String?
  category		       ProgramCategory
}

enum MetricCategory {
  demographic
  outcome
}

enum ProgramCategory {
  volunteer
  donate
  enrichment
  donation_funded
  donors_choose
}